<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #>
<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>

<#
} else if(IsLayoutPageSelected) {
#>

@{
    ViewBag.Title = "<#= ViewDataTypeShortName #>";
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}

<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title><#= ViewDataTypeShortName #></title>
</head>
<body>
<#
    PushIndent("    ");
}
#>
<#
if (ReferenceScriptLibraries) {
#>
<#
    if (!IsLayoutPageSelected && IsBundleConfigPresent) {
#>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")

<#
    }
#>
<#
    else if (!IsLayoutPageSelected) {
#>
<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<#
    }
#>

<#
}
#>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
<div class="panel panel-default">

    <div class="panel-heading">
        <h3 class="panel-title">Informações</h3>
    </div>
    <div class="panel-body">	
<# 
    if (isControlHtmlAttributesSupported) {
#>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
<#        
    } else {
#>
        @Html.ValidationSummary(true)
<#      
    }
#>
<#
foreach (PropertyMetadata property in ModelMetadata.Properties) {
    if (property.Scaffold && !property.IsAssociation) {
        if (property.IsPrimaryKey) {
#>
		<div class="row">
            <div class="form-group col-sm-12">

			@Html.HiddenFor(model => model.<#= property.PropertyName #>)
<#
            if (property.IsForeignKey) {
#>
            @Html.LabelFor(model => model.<#= property.PropertyName #>, "<#= GetAssociationName(property) #>", htmlAttributes: new { @class = "control-label" })
<#
            } else {
#>
            @Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label" })
<#
            }
#>
			<p class="form-control-static">@Html.DisplayFor(model => model.<#= property.PropertyName #>)</p>
			</div>
		</div>
<#
        } else if (!property.IsReadOnly) {
			if (property.IsForeignKey) {
#>
		<div class="panel panel-default">
			<div class="panel-heading">
				<h3 class="panel-title"><#= GetAssociationName(property) #></h3>
			</div>
			<div class="panel-body">
<#
			}
#>
        <div class="row">
            <div class="form-group col-sm-<#=property.IsForeignKey? "6": "12"#>">
<#
            if (property.IsForeignKey) {
#>
				@Html.LabelFor(model => model.<#= property.PropertyName #>, "<#= GetAssociationName(property) #>", htmlAttributes: new { @class = "control-label" })
				<div class="input-group">
<#
            } else {
#>
				@Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label" })
<#
            }
            bool isCheckbox = property.TypeName.Equals(boolType);
            if (isControlHtmlAttributesSupported) {
                if (isCheckbox) {
#>
                <div class="checkbox">
<#
                    PushIndent("    ");
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
                } else if (property.IsEnum && !property.IsEnumFlags) {
#>
                @Html.EnumDropDownListFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "form-control" })
<#
                } else {
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
<#
                }
            } else {
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
            }
			if (property.IsForeignKey){
#>
					<span class="input-group-btn">
						<button type="button" class="btn btn-default" onclick="Lista_<#= GetAssociationName(property) #>.abrir()"><i class="glyphicon glyphicon-search"></i></button>
					</span>
				</div>
<# 			
			}
            if (isControlHtmlAttributesSupported) {
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>, "", new { @class = "text-danger" })
<#        
            } else {
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
<#      
            }
#>
<#
				if (isCheckbox && isControlHtmlAttributesSupported) {
                PopIndent();
#>
                </div>
<#
            }
#>
            </div>
<#
			if (property.IsForeignKey){
#>
				<div class="form-group col-sm-6">
					@Html.LabelFor(model => model.<#=GetAssociationName(property) #>/*.Descricao*/, htmlAttributes: new { @class = "control-label" })
					<p class="form-control-static" id="@Html.IdFor(model => model.<#=GetAssociationName(property) #>/*.Descricao*/)">@Html.DisplayFor(model => model.<#=GetAssociationName(property) #>/*.Descricao*/)</p>
				</div>			
<#			
			}
#>
        </div>

<#	
			if (property.IsForeignKey){
#>
			@Html.Partial("~/Views/<#= GetAssociationName(property) #>/_Selecionar.cshtml")
			<script>
				var @Html.IdFor(model => model.<#= property.PropertyName#>) = "@Html.IdFor(model => model.<#= property.PropertyName#>)";
				var @Html.IdFor(model => model.<#=GetAssociationName(property) #>/*.Descricao*/) = "@Html.IdFor(model => model.<#=GetAssociationName(property) #>/*.Descricao*/)";

				var <#= ViewDataTypeShortName #>_<#= GetAssociationName(property) #> = {
					isvalid: function () {

						$("span[data-valmsg-for='" + @Html.IdFor(model => model.<#= property.PropertyName#>) + "']").html('');
						$("#" + @Html.IdFor(model => model.<#=GetAssociationName(property) #>/*.Descricao*/)).html('');

						var id = $('#' + @Html.IdFor(model => model.<#= property.PropertyName#>)).val();
						if (id != '' && id != '0'){
							$.ajax({
								type: 'GET',
								url: '@Url.Action(actionName: "Find", controllerName: "<#= GetAssociationName(property) #>")',
								data: { "id": id },
								success: function (data) {
									if (!!data.erro) {
										<#= ViewDataTypeShortName #>_<#= GetAssociationName(property) #>.msgCampo(@Html.IdFor(model => model.<#= property.PropertyName#>), data.erro);
										$('#' + @Html.IdFor(model => model.<#= property.PropertyName#>)).val('');
										$('#' + @Html.IdFor(model => model.<#= property.PropertyName#>)).focus();

									}
									else {
										$("#" + @Html.IdFor(model => model.<#=GetAssociationName(property) #>/*.Descricao*/)).html(data.@Html.IdFor(model => model.<#=GetAssociationName(property) #>/*.Descricao*/));
									}
								},
								error: function (xhr, ajaxOptions, thrownError) {
									<#= ViewDataTypeShortName #>_<#= GetAssociationName(property) #>.msgCampo(@Html.IdFor(model => model.<#= property.PropertyName#>), "Erro na conexão: " + xhr.responseText)
									$('#' + @Html.IdFor(model => model.<#= property.PropertyName#>)).val('');
									$('#' + @Html.IdFor(model => model.<#= property.PropertyName#>)).focus();
								}

							});
						}
					},
					msgCampo: function (id_campo, mensagem) {
						var span = document.createElement('span');
						$(span).attr('for', id_campo);
						$(span).html(mensagem);
						$("span[data-valmsg-for='" + id_campo + "']").append(span);
					}
				};

				$("#" + @Html.IdFor(model => model.<#= property.PropertyName#>)).blur(function () {
					<#= ViewDataTypeShortName #>_<#= GetAssociationName(property) #>.isvalid();
				});
			</script>
		</div>
	</div>
	
<#		
			}
        }
    }
}
#>
	<div class="row">
        <div class="form-group col-sm-offset-9 col-sm-3">                
            <button type="submit" class="btn btn-primary"><i class="glyphicon glyphicon-ok-circle"></i> Salvar</button>
            <a href="@Url.Action(actionName: "Index")" class="btn btn-default"><i class="glyphicon glyphicon-remove-circle"></i> Fechar</a>
        </div>
    </div>
	</div>
</div>
}

<#
if(IsLayoutPageSelected && ReferenceScriptLibraries && IsBundleConfigPresent) {
#>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<#
}
#>
<#
else if(IsLayoutPageSelected && ReferenceScriptLibraries) {
#>

<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<#
}
#>
<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>
</body>
</html>
<#
}
#>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>